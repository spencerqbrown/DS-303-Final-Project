test = prostate[test_index,]
train = prostate[-test_index,]
test
test[,-1]
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
mse = mean((test$lpsa - predict.lm(current_model, newdata=test)) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
test$lpsa
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
mse = mean((test$lpsa - predict(current_model, newdata=test)) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
mse = mean((test$lpsa - predict(current_model, newdata=test[,-1])) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
mse = mean((test$lpsa - predict(current_model, newdata=test)) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
test
current_model
predict(current_model, newdata=test)
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
test.mat = model.matrix(lpsa~.,data=test)
pred = test.mat[,names(current_model)]%*%current_model
mse = mean((test$lpsa - pred) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
MSE_means = MSE_sums / 8
MSE_means
cat("dog", 1)
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
test.mat = model.matrix(lpsa~.,data=test)
pred = test.mat[,names(current_model)]%*%current_model
mse = mean((test$lpsa - pred) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
MSE_means = MSE_sums / 8
for (i in 1:8) {
cat("The CV error for model", i, "is", MSE_means[i])
}
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
test.mat = model.matrix(lpsa~.,data=test)
pred = test.mat[,names(current_model)]%*%current_model
mse = mean((test$lpsa - pred) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
MSE_means = MSE_sums / 8
for (i in 1:8) {
cat("The CV error for model", i, "is", MSE_means[i], ".\n")
}
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
test.mat = model.matrix(lpsa~.,data=test)
pred = test.mat[,names(current_model)]%*%current_model
mse = mean((test$lpsa - pred) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
MSE_means = MSE_sums / 8
for (i in 1:8) {
cat("The CV error for model", i, "is", MSE_means[i], "\n")
}
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
test.mat = model.matrix(lpsa~.,data=test)
pred = test.mat[,names(current_model)]%*%current_model
mse = mean((test$lpsa - pred) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
MSE_means = MSE_sums / 8
for (i in 1:8) {
cat("The CV error for model of size", i, "is", MSE_means[i], "\n")
}
library(caret)
k = 10
set.seed(91)
folds = sample(1:k,nrow(prostate),replace=TRUE)
flds = createFolds(prostate$lpsa, k = 10, list = TRUE, returnTrain = FALSE)
MSE_sums = rep(0,8)
for (i in 1:k) {
# get test/train split
test_index = flds[[i]]
test = prostate[test_index,]
train = prostate[-test_index,]
# get best models
reg = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
for (j in 1:8) {
current_model = coef(reg, id=j)
test.mat = model.matrix(lpsa~.,data=test)
pred = test.mat[,names(current_model)]%*%current_model
mse = mean((test$lpsa - pred) ^ 2)
MSE_sums[j] = MSE_sums[j] + mse
}
}
MSE_means = MSE_sums / k
for (i in 1:8) {
cat("The CV error for model of size", i, "is", MSE_means[i], "\n")
}
best = regsubsets(lpsa~.,data=prostate,nbest=1,nvmax=8)
m7 = coef(reg, id=7)
summary(m7)
best = regsubsets(lpsa~.,data=prostate,nbest=1,nvmax=8)
m7 = coef(reg, id=7)
m7
knitr::opts_chunk$set(echo = TRUE)
pnorm(12,12.2,0.1)
1-pbinom(1,50,0.02275013)
sum(dbinom(1:50,50,0.02275013))
# mean
1000*20
# variance
1000*(20^2)
2^2
20^2
qgamma(0.5,100,20)
qgamma(0.25,100,20)
qgamma(0.75,100,20)
qgamma(0.5,1000,20)
qgamma(0.25,1000,20)
qgamma(0.75,1000,20)
1-pexp(9,1/3.6)
1-pexp(9,1/2.5)
1-pexp(9,1/3.6)
pbeta(0.4,3,2)
1-pbeta(0.4,3,2)
1-pbeta(40,3,2)
1-pbeta(0.4,3,2)
qbeta(0.9,1,3)
pexp(3)
pexp(2,3)
qnorm(0.97,510,80)
?qnorm
setwd("C:/Users/Spencer/Desktop/Senior ISU/Semester 1/DS 303/Project")
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("data.csv")
View(df)
df = read.csv("data.csv")
str(df)
str(df)
df = read.csv("data.csv")
df$Return.to.Prison = as.logical(df$Return.to.Prison)
str(df)
?as.logical
?as.logical.factor
df = read.csv("data.csv")
str(df)
df$Return.to.Prison[df$Return.to.Prison == "No"]
df$Return.to.Prison[df$Return.to.Prison == "No"] = FALSE
df$Return.to.Prison[df$Return.to.Prison == "No"] = "FALSE"
as.character(df$Return.to.Prison)
df = read.csv("data.csv")
str(df)
df$Return.to.Prison = as.character(df$Return.to.Prison)
df$Target.Population = as.character(df$Target.Population)
str(df)
df = read.csv("data.csv")
str(df)
df$Return.to.Prison = as.character(df$Return.to.Prison)
df$Return.to.Prison[df$Return.to.Prison == "Yes"] = "TRUE"
df$Return.to.Prison[df$Return.to.Prison == "No"] = "FALSE"
df$Return.to.Prison = as.logical(df$Return.to.Prison)
df$Target.Population = as.character(df$Target.Population)
str(df)
df = read.csv("data.csv")
str(df)
df$Return.to.Prison = as.character(df$Return.to.Prison)
df$Return.to.Prison[df$Return.to.Prison == "Yes"] = "TRUE"
df$Return.to.Prison[df$Return.to.Prison == "No"] = "FALSE"
df$Return.to.Prison = as.logical(df$Return.to.Prison)
df$Target.Population = as.character(df$Target.Population)
df$Target.Population[df$Target.Population == "Yes"] = "TRUE"
df$Target.Population[df$Target.Population == "No"] = "FALSE"
df$Target.Population = as.logical(df$Target.Population)
str(df)
unique(df$Offense.Classification)
unique(df$Offense.Type)
unique(df$Offense.Subtype)
unique(df$Offense.Classification)
unique(df$Offense.Type)
unique(df$Offense.Subtype)
colnames(df)
colnames(df)[apply(df, 2, anyNA)]
is.na(df$Days.to.Return)
sum(is.na(df$Days.to.Return))
cat("Total NA rows: ",sum(is.na(df$Days.to.Return)))
cat("Total NA rows:",sum(is.na(df$Days.to.Return)))
cat("Rows total:",length(df))
cat("Total NA rows:",sum(is.na(df$Days.to.Return)),"\n")
cat("Rows total:",length(df))
cat("Total NA rows:",sum(is.na(df$Days.to.Return)),"\n")
cat("Rows total:",nrows(df))
cat("Total NA rows:", sum(is.na(df$Days.to.Return)),"\n")
cat("Rows total:", nrow(df))
cat("Total NA rows:", sum(is.na(df$Days.to.Return)),"\n")
cat("Rows total:", nrow(df), "\n")
cat("Proportion of rows NA:", sum(is.na(df$Days.to.Return)) / nrow(df))
# we can see if there any NAs that aren't matched with those that did not return to prison
df$Days.to.Return[df$Return.to.Prison == TRUE]
# we can see if there any NAs that aren't matched with those that did not return to prison
df$Days.to.Return[(df$Days.to.Return == NA) & (df$Return.to.Prison == TRUE)]
# we can see if there any NAs that aren't matched with those that did not return to prison
length(df$Days.to.Return[(df$Days.to.Return == NA) & (df$Return.to.Prison == TRUE)])
# we can see if there any NAs that aren't matched with those that did not return to prison
length(df$Days.to.Return[(is.na(df$Days.to.Return)) & (df$Return.to.Prison == TRUE)])
setdiff(levels(df$Offense.Type), levels(df$New.Offense.Type))
levels(df$New.Offense.Type)
levels(df$Offense.Classification)
levels(df$Offense.Type)
levels(df$Offense.Subtype)
levels(df$New.Offense.Sub.Type)
df$Offense.Type == df$New.Offense.Type
as.character(df$Offense.Type) == as.character(df$New.Offense.Type)
sum(as.character(df$Offense.Type) == as.character(df$New.Offense.Type))
df[as.character(df$Offense.Type) == as.character(df$New.Offense.Type)]
df[,as.character(df$Offense.Type) == as.character(df$New.Offense.Type)]
df[as.character(df$Offense.Type) == as.character(df$New.Offense.Type),]
df$New.Offense.Type[(df$New.Offense.Type == "") | (df$New.Offense.Sub.Type == "")]
len(df$New.Offense.Type[(df$New.Offense.Type == "") | (df$New.Offense.Sub.Type == "")])
length(df$New.Offense.Type[(df$New.Offense.Type == "") | (df$New.Offense.Sub.Type == "")])
library(ggplot2)
ggplot(df, aes(x=Offensive.Type)) + geom_bar()
library(ggplot2)
ggplot(df, aes(x=Offense.Type)) + geom_bar()
library(ggplot2)
ggplot(df, aes(x=reorder(Offense.Type, 1, length))) + geom_bar()
library(ggplot2)
ggplot(df, aes(x=reorder(Offense.Type, Offense.Type, length))) + geom_bar()
library(ggplot2)
df$Offense.Type = reorder(Offense.Type, Offense.Type, length)
library(ggplot2)
df$Offense.Type = reorder(Offense.Type, Offense.Type, length)
str(df)
library(ggplot2)
df$Offense.Type = reorder(df$Offense.Type, df$Offense.Type, length)
df$Offense.Subtype = reorder(df$Offense.Subtype, df$Offense.Subtype, length)
df$New.Offense.Type = reorder(df$New.Offense.Type, df$New.Offense.Type, length)
df$New.Offense.Subtype = reorder(df$New.Offense.Subtype, df$New.Offense.Subtype, length)
library(ggplot2)
df$Offense.Type = reorder(df$Offense.Type, df$Offense.Type, length)
df$Offense.Subtype = reorder(df$Offense.Subtype, df$Offense.Subtype, length)
df$New.Offense.Type = reorder(df$New.Offense.Type, df$New.Offense.Type, length)
df$New.Offense.Sub.Type = reorder(df$New.Offense.Sub.Type, df$New.Offense.Sub.Type, length)
ggplot(df, aes(x=Offense.Type)) + geom_bar()
ggplot(df, aes(x=Offense.Type)) + geom_bar() + labs(x="Offense Type", y="Count", title="Count of Offenses by Type")
ggplot(df, aes(x=Offense.Subtype)) + geom_bar() + labs(x="Offense Subtype", y="Count", title="Count of Offenses by Subtype")
ggplot(df, aes(x=Offense.Subtype)) + geom_bar(stat='identity') + labs(x="Offense Subtype", y="Count", title="Count of Offenses by Subtype") + coord_flip()
ggplot(df, aes(x=Offense.Subtype)) + geom_bar() + labs(x="Offense Subtype", y="Count", title="Count of Offenses by Subtype") + coord_flip()
# sideways because there are so many factors
ggplot(df, aes(x=New.Offense.Type)) + geom_bar() + labs(x="New Offense Type", y="Count", title="Count of New Offenses by Type") + coord_flip()
# sideways because there are so many factors
ggplot(df, aes(x=New.Offense.Type)) + geom_bar() + labs(x="New Offense Type", y="Count", title="Count of New Offenses by Type")
# sideways because there are so many factors
ggplot(df, aes(x=New.Offense.Type)) + geom_bar() + labs(x="New Offense Type", y="Count", title="Count of New Offenses by Type") + coord_flip()
df$New.Offense.Type = droplevels(df$New.Offense.Type)
ggplot(df, aes(x=Offense.Type)) + geom_bar() + labs(x="Offense Type", y="Count", title="Count of Offenses by Type") + coord_flip()
ggplot(df, aes(x=New.Offense.Sub.Type)) + geom_bar() + labs(x="New Offense Subtype", y="Count", title="Count of New Offenses by Subtype") + coord_flip()
df$Offense.Subtype = droplevels(df$Offense.Subtype)
df$New.Offense.Type = droplevels(df$New.Offense.Type)
df$Offense.Subtype = droplevels(df$Offense.Subtype)
df$New.Offense.Type = droplevels(df$New.Offense.Type)
df$New.Offense.Sub.Type = droplevels(df$New.Offense.Sub.Type)
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Sex = droplevels(df$Sex)
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
ggplot(df, aes(x=New.Offense.Sub.Type)) + geom_bar() + labs(x="New Offense Subtype", y="Count", title="Count of New Offenses by Subtype") + coord_flip()
ggplot(df, aes(x=New.Offense.Type)) + geom_bar() + labs(x="New Offense Type", y="Count", title="Count of New Offenses by Type") + coord_flip()
droplevels(df$Offense.Subtype)
df$New.Offense.Type = droplevels(df$New.Offense.Type)
df$New.Offense.Sub.Type = droplevels(df$New.Offense.Sub.Type)
df$Sex = droplevels(df$Sex)
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Sex = droplevels(df$Sex)
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
levels(df$Sex)
length(df$Sex)
length(droplevels(df$Sex))
df$Sex = factor(df$Sex)
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
levels(df$Sex)
df$Sex = factor(droplevels(df$Sex))
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
levels(df$Sex)
df$Sex[df$Sex==""]
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
levels(df$Sex)
df$Sex[df$Sex==""]
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Sex[df$Sex==""]
#ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
levels(df$Sex)
#ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Offense.Subtype
levels(df$New.Offense.Type)
#ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Offense.Subtype = droplevels(df$Offense.Subtype)
df$New.Offense.Type = factor(df$New.Offense.Type)
df$New.Offense.Sub.Type = droplevels(df$New.Offense.Sub.Type)
levels(df$New.Offense.Type)
#ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Offense.Subtype = factor(droplevels(df$Offense.Subtype))
df$New.Offense.Type = factor(df$New.Offense.Type)
df$New.Offense.Sub.Type = droplevels(df$New.Offense.Sub.Type)
levels(droplevels(df$Offense.Subtype))
#ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Offense.Subtype[df$Offense.Subtype == "Animals"]
#ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
df$Sex[df$Sex == ""]
df$Sex[(df$Sex != "Male") & (df$Sex != "Female")]
ggplot(df, aes(x=Days.to.return)) + geom_histogram() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Sex", y="Count", title="Count of Offenders by Sex")
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return")
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return") + geom_vline(mean(df$Days.to.Return))
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return") + geom_vline(xintercept = mean(df$Days.to.Return))
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return") + geom_vline(xintercept = mean(df$Days.to.Return),colour="blue")
mean(df$Days.to.Return)
mean(df$Days.to.Return, na.rm=TRUE)
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return") + geom_vline(xintercept = mean(df$Days.to.Return, na.rm=TRUE),colour="blue")
days.mean = mean(df$Days.to.Return, na.rm=TRUE)
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return") + geom_vline(xintercept = days.mean,colour="blue")
age.mean = mean(df$Age.At.Release, na.rm=TRUE)
ggplot(df, aes(x=Age.At.Release)) + geom_histogram() + labs(x="Age at Release", y="Count", title="Distribution of Offenders by Age at Release") + geom_vline(xintercept = days.mean,colour="blue")
age.mean = mean(df$Age.At.Release, na.rm=TRUE)
ggplot(df, aes(x=Age.At.Release)) + geom_histogram() + labs(x="Age at Release", y="Count", title="Distribution of Offenders by Age at Release") + geom_vline(xintercept = age.mean,colour="blue")
ggplot(df, aes(x=Age.At.Release)) + geom_bar() + labs(x="Age at Release", y="Count", title="Count of Offenders by Age Group at Release")
library(ggplot2)
df$Offense.Type = reorder(df$Offense.Type, df$Offense.Type, length)
df$Offense.Subtype = reorder(df$Offense.Subtype, df$Offense.Subtype, length)
df$New.Offense.Type = reorder(df$New.Offense.Type, df$New.Offense.Type, length)
df$New.Offense.Sub.Type = reorder(df$New.Offense.Sub.Type, df$New.Offense.Sub.Type, length)
df$Age.At.Release = reorder(df$Age.At.Release, df$Age.At.Release, length)
ggplot(df, aes(x=Age.At.Release)) + geom_bar() + labs(x="Age at Release", y="Count", title="Count of Offenders by Age Group at Release")
Export data
```{r}
write.csv(df, 'data_cleaned.csv')
```
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("data.csv")
str(df)
df$Return.to.Prison = as.character(df$Return.to.Prison)
df$Return.to.Prison[df$Return.to.Prison == "Yes"] = "TRUE"
df$Return.to.Prison[df$Return.to.Prison == "No"] = "FALSE"
df$Return.to.Prison = as.logical(df$Return.to.Prison)
df$Target.Population = as.character(df$Target.Population)
df$Target.Population[df$Target.Population == "Yes"] = "TRUE"
df$Target.Population[df$Target.Population == "No"] = "FALSE"
df$Target.Population = as.logical(df$Target.Population)
str(df)
# find all columns with NA using an apply of anyNA on each column
colnames(df)[apply(df, 2, anyNA)]
cat("Total NA rows:", sum(is.na(df$Days.to.Return)),"\n")
cat("Rows total:", nrow(df), "\n")
cat("Proportion of rows NA:", sum(is.na(df$Days.to.Return)) / nrow(df))
# we can see if there any NAs that aren't matched with those that did not return to prison
length(df$Days.to.Return[(is.na(df$Days.to.Return)) & (df$Return.to.Prison == TRUE)])
levels(df$Offense.Classification)
levels(df$Offense.Type)
levels(df$Offense.Subtype)
levels(df$New.Offense.Type)
levels(df$New.Offense.Sub.Type)
sum(as.character(df$Offense.Type) == as.character(df$New.Offense.Type))
length(df$New.Offense.Type[(df$New.Offense.Type == "") | (df$New.Offense.Sub.Type == "")])
library(ggplot2)
df$Offense.Type = reorder(df$Offense.Type, df$Offense.Type, length)
df$Offense.Subtype = reorder(df$Offense.Subtype, df$Offense.Subtype, length)
df$New.Offense.Type = reorder(df$New.Offense.Type, df$New.Offense.Type, length)
df$New.Offense.Sub.Type = reorder(df$New.Offense.Sub.Type, df$New.Offense.Sub.Type, length)
df$Age.At.Release = reorder(df$Age.At.Release, df$Age.At.Release, length)
ggplot(df, aes(x=Offense.Type)) + geom_bar() + labs(x="Offense Type", y="Count", title="Count of Offenses by Type") + coord_flip()
ggplot(df, aes(x=Offense.Subtype)) + geom_bar() + labs(x="Offense Subtype", y="Count", title="Count of Offenses by Subtype") + coord_flip()
ggplot(df, aes(x=New.Offense.Type)) + geom_bar() + labs(x="New Offense Type", y="Count", title="Count of New Offenses by Type") + coord_flip()
ggplot(df, aes(x=New.Offense.Sub.Type)) + geom_bar() + labs(x="New Offense Subtype", y="Count", title="Count of New Offenses by Subtype") + coord_flip()
ggplot(df, aes(x=Sex)) + geom_bar() + labs(x="Sex", y="Count", title="Count of Offenders by Sex") + coord_flip()
days.mean = mean(df$Days.to.Return, na.rm=TRUE)
ggplot(df, aes(x=Days.to.Return)) + geom_histogram() + labs(x="Days to Return", y="Count", title="Distribution of Offenders by Days to Return") + geom_vline(xintercept = days.mean,colour="blue")
ggplot(df, aes(x=Age.At.Release)) + geom_bar() + labs(x="Age at Release", y="Count", title="Count of Offenders by Age Group at Release")
